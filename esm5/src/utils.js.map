{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../packages/platform-server/src/utils.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,cAAc,EAAkE,MAAM,eAAe,CAAC;AAC9G,OAAO,EAAC,cAAc,EAAC,MAAM,2BAA2B,CAAC;AACzD,OAAO,EAAC,KAAK,EAAC,MAAM,gBAAgB,CAAC;AAErC,OAAO,EAAC,aAAa,EAAC,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAC,qBAAqB,EAAE,cAAc,EAAC,MAAM,UAAU,CAAC;AAC/D,OAAO,EAAC,qBAAqB,EAAE,cAAc,EAAC,MAAM,UAAU,CAAC;;;;;;;;;;;;;;;;AAQ/D,SAAS,YAAY,CACjB,eAAkE,EAClE,OAAwB;;IAC1B,IAAM,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC;IAC5E,OAAO,eAAe,CAAC;QACrB,EAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,EAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAC,EAAC;QACnF,cAAc;KACf,CAAC,CAAC;CACJ;;;;;;;AAED,SAAS,OAAO,CACZ,QAAqB,EAAE,gBAAyC;IAClE,OAAO,gBAAgB,CAAC,IAAI,CAAC,UAAC,SAAS;;QACrC,IAAM,YAAY,GAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QAClE,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,IAAI,KAAK,CACX,qKAC8D,CAAC,CAAC;SACrE;;QACD,IAAM,cAAc,GAAmB,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC9E,OAAO,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,UAAC,QAAiB,IAAK,OAAA,QAAQ,EAAR,CAAQ,CAAC,CAAC,CAAC;aACxE,SAAS,EAAE;aACX,IAAI,CAAC;;YACJ,IAAM,aAAa,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;;YAG3D,IAAM,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;YACtE,IAAI,SAAS,EAAE;gBACb,KAAuB,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS,EAAE;oBAA7B,IAAM,QAAQ,kBAAA;oBACjB,IAAI;wBACF,QAAQ,EAAE,CAAC;qBACZ;oBAAC,OAAO,CAAC,EAAE;;wBAEV,OAAO,CAAC,IAAI,CAAC,4CAA4C,EAAE,CAAC,CAAC,CAAC;qBAC/D;iBACF;aACF;;YAED,IAAM,MAAM,GAAG,aAAa,CAAC,cAAc,EAAE,CAAC;YAC9C,QAAQ,CAAC,OAAO,EAAE,CAAC;YACnB,OAAO,MAAM,CAAC;SACf,CAAC,CAAC;KACR,CAAC,CAAC;CACJ;;;;;;;;;;;;;;;;;AAcD,MAAM,UAAU,YAAY,CACxB,MAAe,EAAE,OAA6E;;IAEhG,IAAM,QAAQ,GAAG,YAAY,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;IAC9D,OAAO,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;CAC5D;;;;;;;;;;;;;;AAWD,MAAM,UAAU,mBAAmB,CAC/B,aAAiC,EACjC,OAA6E;;IAE/E,IAAM,QAAQ,GAAG,YAAY,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IACvD,OAAO,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC;CAC1E","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, NgModuleFactory, NgModuleRef, PlatformRef, StaticProvider, Type} from '@angular/core';\nimport {ɵTRANSITION_ID} from '@angular/platform-browser';\nimport {first} from 'rxjs/operators';\n\nimport {PlatformState} from './platform_state';\nimport {platformDynamicServer, platformServer} from './server';\nimport {BEFORE_APP_SERIALIZED, INITIAL_CONFIG} from './tokens';\n\ninterface PlatformOptions {\n  document?: string;\n  url?: string;\n  extraProviders?: StaticProvider[];\n}\n\nfunction _getPlatform(\n    platformFactory: (extraProviders: StaticProvider[]) => PlatformRef,\n    options: PlatformOptions): PlatformRef {\n  const extraProviders = options.extraProviders ? options.extraProviders : [];\n  return platformFactory([\n    {provide: INITIAL_CONFIG, useValue: {document: options.document, url: options.url}},\n    extraProviders\n  ]);\n}\n\nfunction _render<T>(\n    platform: PlatformRef, moduleRefPromise: Promise<NgModuleRef<T>>): Promise<string> {\n  return moduleRefPromise.then((moduleRef) => {\n    const transitionId = moduleRef.injector.get(ɵTRANSITION_ID, null);\n    if (!transitionId) {\n      throw new Error(\n          `renderModule[Factory]() requires the use of BrowserModule.withServerTransition() to ensure\nthe server-rendered app can be properly bootstrapped into a client app.`);\n    }\n    const applicationRef: ApplicationRef = moduleRef.injector.get(ApplicationRef);\n    return applicationRef.isStable.pipe((first((isStable: boolean) => isStable)))\n        .toPromise()\n        .then(() => {\n          const platformState = platform.injector.get(PlatformState);\n\n          // Run any BEFORE_APP_SERIALIZED callbacks just before rendering to string.\n          const callbacks = moduleRef.injector.get(BEFORE_APP_SERIALIZED, null);\n          if (callbacks) {\n            for (const callback of callbacks) {\n              try {\n                callback();\n              } catch (e) {\n                // Ignore exceptions.\n                console.warn('Ignoring BEFORE_APP_SERIALIZED Exception: ', e);\n              }\n            }\n          }\n\n          const output = platformState.renderToString();\n          platform.destroy();\n          return output;\n        });\n  });\n}\n\n/**\n * Renders a Module to string.\n *\n * `document` is the full document HTML of the page to render, as a string.\n * `url` is the URL for the current render request.\n * `extraProviders` are the platform level providers for the current render request.\n *\n * Do not use this in a production server environment. Use pre-compiled {@link NgModuleFactory} with\n * {@link renderModuleFactory} instead.\n *\n * @publicApi\n */\nexport function renderModule<T>(\n    module: Type<T>, options: {document?: string, url?: string, extraProviders?: StaticProvider[]}):\n    Promise<string> {\n  const platform = _getPlatform(platformDynamicServer, options);\n  return _render(platform, platform.bootstrapModule(module));\n}\n\n/**\n * Renders a {@link NgModuleFactory} to string.\n *\n * `document` is the full document HTML of the page to render, as a string.\n * `url` is the URL for the current render request.\n * `extraProviders` are the platform level providers for the current render request.\n *\n * @publicApi\n */\nexport function renderModuleFactory<T>(\n    moduleFactory: NgModuleFactory<T>,\n    options: {document?: string, url?: string, extraProviders?: StaticProvider[]}):\n    Promise<string> {\n  const platform = _getPlatform(platformServer, options);\n  return _render(platform, platform.bootstrapModuleFactory(moduleFactory));\n}\n"]}