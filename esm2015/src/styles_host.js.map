{"version":3,"file":"styles_host.js","sourceRoot":"","sources":["../../../../packages/platform-server/src/styles_host.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAiB,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAC,MAAM,eAAe,CAAC;AAC3E,OAAO,EAAC,QAAQ,EAA6B,iBAAiB,IAAI,gBAAgB,EAAE,cAAc,EAAE,OAAO,IAAI,MAAM,EAAC,MAAM,2BAA2B,CAAC;AAGxJ,MAAM,OAAO,gBAAiB,SAAQ,gBAAgB;;;;;IAGpD,YAC8B,GAAQ,EACU,YAAoB;QAClE,KAAK,EAAE,CAAC;QAFoB,QAAG,GAAH,GAAG,CAAK;QACU,iBAAY,GAAZ,YAAY,CAAQ;oBAJhD,IAAI;QAMtB,IAAI,CAAC,IAAI,GAAG,MAAM,EAAE,CAAC,oBAAoB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;KAC3D;;;;;IAEO,SAAS,CAAC,KAAa;;QAC7B,IAAI,OAAO,GAAG,MAAM,EAAE,CAAC;;QACvB,MAAM,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC1C,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QAC3B,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;YACvB,OAAO,CAAC,YAAY,CAAC,EAAE,EAAE,eAAe,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;SAC9D;QACD,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;;;;;;IAGrC,aAAa,CAAC,SAAsB,IAAI,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;;;YArB7F,UAAU;;;;4CAKJ,MAAM,SAAC,QAAQ;yCACf,QAAQ,YAAI,MAAM,SAAC,cAAc","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, Inject, Injectable, Optional} from '@angular/core';\nimport {DOCUMENT, ɵDomAdapter as DomAdapter, ɵSharedStylesHost as SharedStylesHost, ɵTRANSITION_ID, ɵgetDOM as getDOM} from '@angular/platform-browser';\n\n@Injectable()\nexport class ServerStylesHost extends SharedStylesHost {\n  private head: any = null;\n\n  constructor(\n      @Inject(DOCUMENT) private doc: any,\n      @Optional() @Inject(ɵTRANSITION_ID) private transitionId: string) {\n    super();\n    this.head = getDOM().getElementsByTagName(doc, 'head')[0];\n  }\n\n  private _addStyle(style: string): void {\n    let adapter = getDOM();\n    const el = adapter.createElement('style');\n    adapter.setText(el, style);\n    if (!!this.transitionId) {\n      adapter.setAttribute(el, 'ng-transition', this.transitionId);\n    }\n    adapter.appendChild(this.head, el);\n  }\n\n  onStylesAdded(additions: Set<string>) { additions.forEach(style => this._addStyle(style)); }\n}\n"]}